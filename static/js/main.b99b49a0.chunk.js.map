{"version":3,"sources":["Components/InputItem.js","Components/UserData.js","Components/CommentListItem.js","Components/CommentList.js","App.js","serviceWorker.js","index.js"],"names":["InputItem","props","react_default","a","createElement","type","name","className","value","inputValue","onChange","onInputChange","UserData","isLoading","Object","keys","userData","length","userId","username","email","CommentListItem","key","itemKey","title","body","CommentList","comments","slice","map","comment","id","Components_CommentListItem","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","userComments","handleInputChange","bind","assertThisInitialized","sendAxiosRequest","_this2","userUrl","concat","commentsUrl","axios","get","then","res","handleAxiosRequest","catch","setState","message","resetData","console","data","address","adress","e","_this3","target","Components_InputItem","Components_UserData","Components_CommentList","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b99b49a0.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputItem = props => {\n    return (\n        <input type=\"number\"\n               name=\"id\"\n               className=\"input\"\n               value={props.inputValue}\n               onChange={props.onInputChange}\n        />\n    );\n};\n\nexport default InputItem;","import React from 'react';\n\nconst UserData = props => {\n    return (\n        <div>\n            <h2>User Data</h2>\n\n            {!props.isLoading && Object.keys(props.userData).length !== 0 ? (\n\n                <div className=\"user\">\n                    <p className=\"user__text\">\n                        <span>{props.userData.name}</span>\n                    </p>\n                    <p className=\"user__text\">\n                        <span>{props.userData.username}</span>\n                    </p>\n                    <p className=\"user__text\">\n                        <span>{props.userData.email}</span>\n                    </p>\n                </div>\n            ): (\n                <p className=\"error\">Keinen Benutzer mit der ID {props.userData.userId} gefunden</p>\n            )}\n        </div>\n    );\n};\n\nexport default UserData;","import React from 'react';\n\nconst CommentListItem = props => {\n  return (\n      <blockquote className=\"comment\" key={props.itemKey}>\n          <p className=\"comment__title\">\n              {props.title}\n          </p>\n          <p className=\"comment__body\">\n              {props.body}\n          </p>\n      </blockquote>\n  );\n};\n\nexport default CommentListItem;","import React from 'react';\nimport CommentListItem from './CommentListItem';\n\nconst CommentList = props => {\n    return (\n      <div>\n          <h2>Comments (first five)</h2>\n          {!props.isLoading && props.comments.length > 0 ? (\n              props.comments.slice(0, 5).map(comment => {\n                  const { id, title, body } = comment;\n\n                  return(\n                      <CommentListItem\n                          title={title}\n                          body={body}\n                          itemKey={id}\n                      />\n                  )\n              })\n          ): (\n              <p className=\"error\">Keine Kommentare mit der ID {props.userId} gefunden</p>\n          )}\n      </div>\n    );\n};\n\nexport default CommentList;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport InputItem from './Components/InputItem';\nimport UserData from './Components/UserData';\nimport CommentList from './Components/CommentList';\n\nexport default class App extends Component {\n    /**\n     * constructor for declaring state and stuff\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            error: null,\n            id: 1,\n            userData: {},\n            userComments: []\n        };\n\n        // bind handleInputChange to use this\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    /**\n     * if app did mount, send request\n     */\n    componentDidMount() {\n        this.sendAxiosRequest();\n    }\n\n    /**\n     * prepare axios request and send for user & comments api\n     */\n    sendAxiosRequest() {\n        // define default user for requests\n        let userUrl = `https://jsonplaceholder.typicode.com/users/${this.state.id}`;\n        let commentsUrl = `https://jsonplaceholder.typicode.com/posts?userId=${this.state.id}`;\n\n        // request for user Data\n        axios.get(userUrl)\n            .then(res => {\n                this.handleAxiosRequest(res, \"user\");\n            })\n            .catch(error => {\n                // handle error\n                this.setState({\n                    isLoading: false,\n                    error: {\n                        message: `error in user async request: ${error}`\n                    }\n                });\n                this.resetData();\n                console.error('error in user async request: ', error);\n            });\n\n        // request for user Comments\n        axios.get(commentsUrl)\n            .then(res => {\n                this.handleAxiosRequest(res, \"comments\");\n            })\n            .catch(error => {\n                // handle error\n                this.setState({\n                    isLoading: false,\n                    error: {\n                        message: `error in comments async request: ${error}`\n                    }\n                });\n                this.resetData();\n                console.error('error in comments async request: ', error);\n            });\n    }\n\n    /**\n     * reset state data on error\n     */\n    resetData() {\n        this.setState({\n            userData: {},\n            userComments: []\n        });\n    }\n\n    /**\n     * Method for Request Response, checks for type if user or comments response\n     * @param res\n     * @param type\n     */\n    handleAxiosRequest(res, type) {\n        if(!type || !res) return;\n\n        // check if result is returned successfully\n        if(res !== 'undefined' && typeof res === \"object\" && res.data) {\n            switch (type) {\n                case \"user\":\n                    this.setState({\n                        userData: {\n                            name: res.data.name,\n                            username: res.data.username,\n                            email: res.data.email,\n                            address: res.data.adress\n                        },\n                        error: null,\n                        isLoading: false\n                    });\n                    break;\n\n                case \"comments\":\n                    this.setState({\n                        userComments: res.data,\n                        isLoading: false,\n                        error: null\n                    });\n                    break;\n                default:\n                    this.setState({\n                        isLoading: false,\n                        error: {\n                            message: \"type is not correctly set, please provide a valid type\"\n                        }\n                    });\n                    console.error('type is not correctly set, please provide a valid type');\n            }\n        }else {\n            // error handling\n            this.setState({\n                error: {\n                    isLoading: false,\n                    message: \"Async Response is invalid, please check...\"\n                }\n            });\n            console.error('Async Response is invalid, please check...');\n        }\n\n    }\n\n    /**\n     * user input onChange handler, set state id and request\n     * @param e\n     */\n    handleInputChange(e) {\n        this.setState({ id: e.target.value }, () => {\n            this.sendAxiosRequest();\n        });\n    }\n\n    /**\n     * renter method\n     */\n    render() {\n        const { error } = this.state;\n\n        return (\n            <div className=\"App\">\n                <h1>Fetch asynchronous data from an API (2h)</h1>\n                <p>Type in a random number, this user with the given number is fetched</p>\n\n                <InputItem\n                    inputValue={this.state.id}\n                    onInputChange={this.handleInputChange}\n                />\n\n                {error ? <p className=\"error\">{error.message}</p> : null}\n\n                <div className=\"container\">\n                    <UserData\n                        isLoading={this.state.isLoading}\n                        userData={this.state.userData}\n                    />\n\n                    <CommentList\n                        isLoading={this.state.isLoading}\n                        userId={this.state.id}\n                        comments={this.state.userComments}\n                    />\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}